#!/usr/bin/env bash

# ========================================================================
# Copyright (c) 2020 Netcrest Technologies, LLC. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ========================================================================

SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
. $SCRIPT_DIR/.addonenv.sh

EXECUTABLE="`basename $0`"
REPO_NAME=hazelcast-desktop

if [ "$HELP" == "true" ]; then
cat <<EOF
NAME
    $EXECUTABLE - Build the kryo_codegen environment

SYNOPSIS
   ./$EXECUTABLE [-registry [url]] [-?]

DESCRIPTION
   Builds the kryo_codegen environment by executing Maven and deploying files to the
   current workspace's plugins directory.

   $PADOGRID_WORKSPACE/plugins

OPTIONS
   -registry [url]
             If specified, then generates the Avro schema files by retrieving schemas from the
             schema registry URL. If URL is not specified then it defaults to "http://localhost:8080".
             If this option is not specified, then the Avro schema files in the 'etc/avro' directory are used.

DEFAULT
   ./$EXECUTABLE

EOF
exit
fi

if [ "$1" == "-registry" ]; then
   REGISTRY="true"
   REGISTRY_URL="$2"
   if [ "REGISTRY_URL" == "" ]; then
      REGISTRY_URL="http://localhost:8080"
   fi
else
   REGISTRY="false"
fi

# Install padogrid-tools to the local Maven repo
mvn install:install-file \
   -Dfile=$PADOGRID_HOME/lib/padogrid-tools-${PADOGRID_VERSION}.jar \
   -DgroupId=padogrid.addon \
   -DartifactId=padogrid-tools \
   -Dversion=${PADOGRID_VERSION} \
   -Dpackaging=jar \
   -DgeneratePom=true

pushd $APP_DIR > /dev/null

# Clean up the source directory
rm -r src > /dev/null 2>&1
mkdir -p src/main/resources

if [ "$REGISTRY" == "true" ]; then
   # Generate AVRO schema files
   t_generate_avro_schemas -registry $REGISTRY_URL \
      -artifacts etc/artifacts.json \
      -dir src/main/resources
else
   cp etc/avro/* src/main/resources/
fi
mvn package 

# Generate wrapper classes
t_generate_wrappers -sp org.hazelcast.demo.nw.data.avro.generated \
   -tp org.hazelcast.demo.nw.data.avro \
   -dir src/main/java \
   -jar lib/app-kryo-codegen-hazelcast-4-1.0.0.jar \
   -classpath lib
mvn package

# Generate KryoSerializer
t_generate_kryo_serializer -id 1200 \
   -package org.hazelcast.demo.nw.data.avro \
   -dir src/main/java \
   -jar lib/app-kryo-codegen-hazelcast-4-1.0.0.jar \
   -classpath lib
mvn package

# Overwrite the generated wrappers with custom wrappers
cp -r src_provided/* src/
mvn package

# Place the generated binaary and dependencies in the workspace's plugins directory
tar -C $PADOGRID_WORKSPACE/plugins/ -xzf target/assembly/app-kryo-codegen-hazelcast-4-1.0.0.tar.gz

popd > /dev/null

#
# Display build information
#
cat <<EOF

Workspace: $PADOGRID_WORKSPACE

Avro classes, wrappter classes, and KryoSerializer generated and deployed to the workspace's
plugins directory.

   $PADOGRID_WORKSPACE/lib

CLASSPATH includes the above directory for all apps and clusters running under this workspace.
Make sure to register the generated KryoSerializer by placing the the following lines in both 
member and client configuration files.

        <serializers>
             <global-serializer override-java-serialization="true">
                 org.hazelcast.demo.nw.data.avro.KryoSerializer
             </global-serializer>
        </serializers>

EOF
